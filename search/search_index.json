{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"vyos-modular A module based customization suite for vyos Direction Previously, vyos-modular worked by modifying both the vyos-1x and vyos-build repositories to build a custom iso from complete sources. However, this meant vyos-modular modules were limited by what vyos-build could do and you couldn't customize a known good LTS or pre-built ISO. Version 2 now works by customizing a pre-existing ISO, either an LTS ISO built by the Vyos team, or one you've already built. Under the hood this uses ansible to expand the customization options available to module developers, and is heavily inspired from the vyos/vyos-vm-images project","title":"Home"},{"location":"#vyos-modular","text":"A module based customization suite for vyos","title":"vyos-modular"},{"location":"#direction","text":"Previously, vyos-modular worked by modifying both the vyos-1x and vyos-build repositories to build a custom iso from complete sources. However, this meant vyos-modular modules were limited by what vyos-build could do and you couldn't customize a known good LTS or pre-built ISO. Version 2 now works by customizing a pre-existing ISO, either an LTS ISO built by the Vyos team, or one you've already built. Under the hood this uses ansible to expand the customization options available to module developers, and is heavily inspired from the vyos/vyos-vm-images project","title":"Direction"},{"location":"module_list/","text":"Module List Below is a list of community developed modules. If you would like your module added please submit a PR Module Link Description tailscale jack-broadway/vyos-module-tailscale Adds the tailscale client as a cli configurable service speedtest kylechase/vyos-module-speedtest Adds the speedtest-cli binaries from ookla","title":"Modules"},{"location":"module_list/#module-list","text":"Below is a list of community developed modules. If you would like your module added please submit a PR Module Link Description tailscale jack-broadway/vyos-module-tailscale Adds the tailscale client as a cli configurable service speedtest kylechase/vyos-module-speedtest Adds the speedtest-cli binaries from ookla","title":"Module List"},{"location":"usage/","text":"Usage Installation This tool is only supported on linux as it shells out to linux tools. Required tools on host system git rsync docker pip install -r requirements.txt Commands Copy your base iso to the dist/isos folder and copy sample_config.yml to your desired location. The sample config below builds with the tailscale module for the 1.3.5 LTS release of equuleus # tailscale-1.3.5-config.yml name: tailscale-1.3.5 vyos_target: # This is used to target an appropriate vyos-core version when using modules # that patch the core branch: 1.3.5 release: equuleus # This is the name of an iso found under dist/isos iso: vyos-1.3.5-amd64.iso modules: - type: git url: https://github.com/jack-broadway/vyos-module-tailscale.git version: main # There should be a module.yaml at the location pointed to by path - type: local path: /path/to/my/in_dev_module Artifacts will output in the bin folder. If unprivileged users dont have access to docker, you will need to run using sudo or root account python3 main.py build -c tailscale-1.3.5-config.yml Building a base ISO If you dont have access to LTS ISOs or want to target a specific commit, vyos-modular can also be used to build base isos. # Build an ISO from the LTS 1.3.5 tag python3 main.py build_iso -b 1.3.5 -r equuleus","title":"Usage"},{"location":"usage/#usage","text":"","title":"Usage"},{"location":"usage/#installation","text":"This tool is only supported on linux as it shells out to linux tools. Required tools on host system git rsync docker pip install -r requirements.txt","title":"Installation"},{"location":"usage/#commands","text":"Copy your base iso to the dist/isos folder and copy sample_config.yml to your desired location. The sample config below builds with the tailscale module for the 1.3.5 LTS release of equuleus # tailscale-1.3.5-config.yml name: tailscale-1.3.5 vyos_target: # This is used to target an appropriate vyos-core version when using modules # that patch the core branch: 1.3.5 release: equuleus # This is the name of an iso found under dist/isos iso: vyos-1.3.5-amd64.iso modules: - type: git url: https://github.com/jack-broadway/vyos-module-tailscale.git version: main # There should be a module.yaml at the location pointed to by path - type: local path: /path/to/my/in_dev_module Artifacts will output in the bin folder. If unprivileged users dont have access to docker, you will need to run using sudo or root account python3 main.py build -c tailscale-1.3.5-config.yml","title":"Commands"},{"location":"usage/#building-a-base-iso","text":"If you dont have access to LTS ISOs or want to target a specific commit, vyos-modular can also be used to build base isos. # Build an ISO from the LTS 1.3.5 tag python3 main.py build_iso -b 1.3.5 -r equuleus","title":"Building a base ISO"},{"location":"modules/ansible/","text":"Ansible Roles vyos-modular supports modification of the system through ansible. Modules have access to the squashfs filesystem that gets mounted during vyos boot to become the root filesystem. Ansible Variables The following ansible variables are available to your roles variable name description sample value vyos_cd_root The mount path of the ISO /mnt/cdrom vyos_install_root The root path to the unpacked root filesystem /mnt/inst_root vyos_version The full version string of the vyos image 1.4-rolling-202307250317 vyos_debian_codename The debian release name for this vyos version bookworm vyos_release The vyos release name for this version sagitta Example Role The following role is taken from kylechase/vyos-module-speedtest as it is a good example of a common module goal to install new packages tasks/main.yml - name: Copy speedtest GPG repo key ansible.builtin.copy: src: files/ookla_speedtest-cli-archive-keyring.gpg dest: \"{{ vyos_install_root }}/usr/share/keyrings/ookla_speedtest-cli-archive-keyring\" mode: '0644' - name: Dearmour speedtest GPG key ansible.builtin.command: chroot {{ vyos_install_root }} gpg --dearmor /usr/share/keyrings/ookla_speedtest-cli-archive-keyring - name: Copy speedtest repo config ansible.builtin.template: src: templates/ookla-speedtest.list.j2 dest: \"{{ vyos_install_root }}/etc/apt/sources.list.d/ookla-speedtest.list\" mode: '0644' - name: apt-get update command: chroot {{ vyos_install_root }} apt-get update - name: install speedtest command: chroot {{ vyos_install_root }} apt-get install -y speedtest - name: apt-get clean command: chroot {{ vyos_install_root }} apt-get clean - name: delete apt lists from cache command: chroot {{ vyos_install_root }} rm -rf /var/lib/apt/lists/ - name: Delete ookla-speedtest.list file: path: \"{{ vyos_install_root }}/etc/apt/sources.list.d/ookla-speedtest.list\" state: absent - name: Delete ookla_speedtest-cli-archive-keyring.gpg file: path: \"{{ vyos_install_root }}/usr/share/keyrings/ookla_speedtest-cli-archive-keyring.gpg\" state: absent templates/ookla-speedtest.list.j2 deb [signed-by=/usr/share/keyrings/ookla_speedtest-cli-archive-keyring.gpg] https://packagecloud.io/ookla/speedtest-cli/debian/ {{ vyos_debian_codename }} main","title":"Ansible"},{"location":"modules/ansible/#ansible-roles","text":"vyos-modular supports modification of the system through ansible. Modules have access to the squashfs filesystem that gets mounted during vyos boot to become the root filesystem.","title":"Ansible Roles"},{"location":"modules/ansible/#ansible-variables","text":"The following ansible variables are available to your roles variable name description sample value vyos_cd_root The mount path of the ISO /mnt/cdrom vyos_install_root The root path to the unpacked root filesystem /mnt/inst_root vyos_version The full version string of the vyos image 1.4-rolling-202307250317 vyos_debian_codename The debian release name for this vyos version bookworm vyos_release The vyos release name for this version sagitta","title":"Ansible Variables"},{"location":"modules/ansible/#example-role","text":"The following role is taken from kylechase/vyos-module-speedtest as it is a good example of a common module goal to install new packages","title":"Example Role"},{"location":"modules/ansible/#tasksmainyml","text":"- name: Copy speedtest GPG repo key ansible.builtin.copy: src: files/ookla_speedtest-cli-archive-keyring.gpg dest: \"{{ vyos_install_root }}/usr/share/keyrings/ookla_speedtest-cli-archive-keyring\" mode: '0644' - name: Dearmour speedtest GPG key ansible.builtin.command: chroot {{ vyos_install_root }} gpg --dearmor /usr/share/keyrings/ookla_speedtest-cli-archive-keyring - name: Copy speedtest repo config ansible.builtin.template: src: templates/ookla-speedtest.list.j2 dest: \"{{ vyos_install_root }}/etc/apt/sources.list.d/ookla-speedtest.list\" mode: '0644' - name: apt-get update command: chroot {{ vyos_install_root }} apt-get update - name: install speedtest command: chroot {{ vyos_install_root }} apt-get install -y speedtest - name: apt-get clean command: chroot {{ vyos_install_root }} apt-get clean - name: delete apt lists from cache command: chroot {{ vyos_install_root }} rm -rf /var/lib/apt/lists/ - name: Delete ookla-speedtest.list file: path: \"{{ vyos_install_root }}/etc/apt/sources.list.d/ookla-speedtest.list\" state: absent - name: Delete ookla_speedtest-cli-archive-keyring.gpg file: path: \"{{ vyos_install_root }}/usr/share/keyrings/ookla_speedtest-cli-archive-keyring.gpg\" state: absent","title":"tasks/main.yml"},{"location":"modules/ansible/#templatesookla-speedtestlistj2","text":"deb [signed-by=/usr/share/keyrings/ookla_speedtest-cli-archive-keyring.gpg] https://packagecloud.io/ookla/speedtest-cli/debian/ {{ vyos_debian_codename }} main","title":"templates/ookla-speedtest.list.j2"},{"location":"modules/core-modification/","text":"Core Modification For more complicated modules (i.e where you want to add functionality to the vyos cli) you will need to patch the core vyos package. vyos-modular has two mechanisms for this, the overlay system and the git patch system. Both systems operate on the vyos/vyos-1x repository. To enable for your module, set patches_core: true in your module spec section. For a sample module, see jack-broadway/vyos-module-tailscale as it uses both the overlay and core patching components Overlay Create vyos-core/{vyos_release}/overlay folder in your module. Any directories created under here will be placed into the vyos-1x repository before building. More information on creating commands can be found in the vyos documentation Development - VyOS 1.4.x (sagitta) . For example, to create a new command tree and its python handler for a custom service, create a directory structure as follows: \u251c\u2500\u2500 vyos-core \u251c\u2500\u2500 sagitta \u251c\u2500\u2500 overlay \u2502\u2500\u2500 src \u2502 \u251c\u2500\u2500 conf_mode \u2502 \u251c\u2500\u2500 service_myservice.py \u2502\u2500\u2500 interface-definitions \u251c\u2500\u2500 service_myservice.xml.in If your overlay doesnt need to change between vyos releases, simply symlink the other releases to your overlay ln -s vyos-core/sagitta/overlay vyos-core/current/overlay Patching If your module needs to modifying existing functionality of vyos, git patches can be used. To create, clone your target version of the vyos-1x repository and make your changes. Then use git diff > my_patch.patch and put in the appropriate release patch folder in your module \u251c\u2500\u2500 vyos-core \u251c\u2500\u2500 sagitta \u2502 \u251c\u2500\u2500 patches \u2502 \u2502\u2500\u2500 my_sagitta_patch.patch \u251c\u2500\u2500 current \u251c\u2500\u2500 patches \u251c\u2500\u2500 my_current_patch.patch","title":"Core Modification"},{"location":"modules/core-modification/#core-modification","text":"For more complicated modules (i.e where you want to add functionality to the vyos cli) you will need to patch the core vyos package. vyos-modular has two mechanisms for this, the overlay system and the git patch system. Both systems operate on the vyos/vyos-1x repository. To enable for your module, set patches_core: true in your module spec section. For a sample module, see jack-broadway/vyos-module-tailscale as it uses both the overlay and core patching components","title":"Core Modification"},{"location":"modules/core-modification/#overlay","text":"Create vyos-core/{vyos_release}/overlay folder in your module. Any directories created under here will be placed into the vyos-1x repository before building. More information on creating commands can be found in the vyos documentation Development - VyOS 1.4.x (sagitta) . For example, to create a new command tree and its python handler for a custom service, create a directory structure as follows: \u251c\u2500\u2500 vyos-core \u251c\u2500\u2500 sagitta \u251c\u2500\u2500 overlay \u2502\u2500\u2500 src \u2502 \u251c\u2500\u2500 conf_mode \u2502 \u251c\u2500\u2500 service_myservice.py \u2502\u2500\u2500 interface-definitions \u251c\u2500\u2500 service_myservice.xml.in If your overlay doesnt need to change between vyos releases, simply symlink the other releases to your overlay ln -s vyos-core/sagitta/overlay vyos-core/current/overlay","title":"Overlay"},{"location":"modules/core-modification/#patching","text":"If your module needs to modifying existing functionality of vyos, git patches can be used. To create, clone your target version of the vyos-1x repository and make your changes. Then use git diff > my_patch.patch and put in the appropriate release patch folder in your module \u251c\u2500\u2500 vyos-core \u251c\u2500\u2500 sagitta \u2502 \u251c\u2500\u2500 patches \u2502 \u2502\u2500\u2500 my_sagitta_patch.patch \u251c\u2500\u2500 current \u251c\u2500\u2500 patches \u251c\u2500\u2500 my_current_patch.patch","title":"Patching"},{"location":"modules/spec/","text":"Module Specification In the root of a module there needs to be a module.yaml that has information needed by vyos-modular Best Practices Tag your modules so that users can target specific versions in their config. Try to make your ansible roles work regardless of version by using the available variables to determine target vyos version Try to make your core patches as generic as possible so they have less chance of breaking between updates Example Structure module.yaml # This is always version 2 version: 2 metadata: name: my-first-module spec: # Patches core is set to true if you want to perform modifications on the vyos-1x code patches_core: true # These roles are run in the order they appear in your spec ansible_roles: - role_a - role_b Directory Structure \u251c\u2500\u2500 roles \u2502 \u251c\u2500\u2500 role_a \u2502 \u2502 \u251c\u2500\u2500 tasks \u2502 \u2502 \u2502\u2500\u2500 main.yml \u2502 \u251c\u2500\u2500 role_b \u2502 \u2502 \u251c\u2500\u2500 tasks \u2502 \u2502 \u2502 \u2502\u2500\u2500 main.yml \u2502 \u2502 \u251c\u2500\u2500 templates \u2502 \u2502 \u251c\u2500\u2500 config.yml.j2 \u251c\u2500\u2500 vyos-core \u2502 \u251c\u2500\u2500 equuleus \u2502 \u2502 \u251c\u2500\u2500 overlay \u2502 \u2502 \u2502 \u251c\u2500\u2500 interface_definitions \u2502 \u2502 \u2502 \u251c\u2500\u2500 service_newservice.xml.in \u2502 \u2502 \u251c\u2500\u2500 patches \u2502 \u2502 \u251c\u2500\u2500 my_equuleus_feature.patch \u2502 \u251c\u2500\u2500 sagitta \u2502 \u2502 \u251c\u2500\u2500 overlay -> ../equuleus/overlay \u2502 \u2502 \u251c\u2500\u2500 patches \u2502 \u2502 \u251c\u2500\u2500 my_sagitta_feature.patch \u2502 \u251c\u2500\u2500 current -> sagitta \u2514\u2500\u2500 module.yaml","title":"Structure"},{"location":"modules/spec/#module-specification","text":"In the root of a module there needs to be a module.yaml that has information needed by vyos-modular","title":"Module Specification"},{"location":"modules/spec/#best-practices","text":"Tag your modules so that users can target specific versions in their config. Try to make your ansible roles work regardless of version by using the available variables to determine target vyos version Try to make your core patches as generic as possible so they have less chance of breaking between updates","title":"Best Practices"},{"location":"modules/spec/#example-structure","text":"","title":"Example Structure"},{"location":"modules/spec/#moduleyaml","text":"# This is always version 2 version: 2 metadata: name: my-first-module spec: # Patches core is set to true if you want to perform modifications on the vyos-1x code patches_core: true # These roles are run in the order they appear in your spec ansible_roles: - role_a - role_b","title":"module.yaml"},{"location":"modules/spec/#directory-structure","text":"\u251c\u2500\u2500 roles \u2502 \u251c\u2500\u2500 role_a \u2502 \u2502 \u251c\u2500\u2500 tasks \u2502 \u2502 \u2502\u2500\u2500 main.yml \u2502 \u251c\u2500\u2500 role_b \u2502 \u2502 \u251c\u2500\u2500 tasks \u2502 \u2502 \u2502 \u2502\u2500\u2500 main.yml \u2502 \u2502 \u251c\u2500\u2500 templates \u2502 \u2502 \u251c\u2500\u2500 config.yml.j2 \u251c\u2500\u2500 vyos-core \u2502 \u251c\u2500\u2500 equuleus \u2502 \u2502 \u251c\u2500\u2500 overlay \u2502 \u2502 \u2502 \u251c\u2500\u2500 interface_definitions \u2502 \u2502 \u2502 \u251c\u2500\u2500 service_newservice.xml.in \u2502 \u2502 \u251c\u2500\u2500 patches \u2502 \u2502 \u251c\u2500\u2500 my_equuleus_feature.patch \u2502 \u251c\u2500\u2500 sagitta \u2502 \u2502 \u251c\u2500\u2500 overlay -> ../equuleus/overlay \u2502 \u2502 \u251c\u2500\u2500 patches \u2502 \u2502 \u251c\u2500\u2500 my_sagitta_feature.patch \u2502 \u251c\u2500\u2500 current -> sagitta \u2514\u2500\u2500 module.yaml","title":"Directory Structure"}]}